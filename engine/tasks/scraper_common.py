from engine import celery

"""
Dummy tasks
"""
@celery.task
def task_status():
    """
    A dummy task to use for status checks.
    :return: None.
    """
    pass


@celery.task
def reverse(msg):
    """
    Background task to reverse the specified string.
    :param msg: string to reverse.
    :return: reversed string.
    """
    return str(msg)[::-1]


@celery.task
def ping():
    """
    Test task.
    :return: pong
    """
    # time.sleep(60)
    return 'pong'


"""
Common scraper tasks
"""
@celery.task
def validate_get_openings_result(self, result):
    """
    Validates results generated by scraper tasks. Current version simply checks that all required keys are present in each dict
    :param result: list of dicts generated by scrapers containing open positions.
    :return: boolean value, true if all required keys are present in each dict.
    """


    requiredFields = {'company', 'title', 'url', 'locations'}
    #optionalFields = {'department', 'description'}

    for r in result:
        if not requiredFields.issubset(set(result.keys())):
            return False

    return True


@celery.task
def enrichLocation(self, result):
    """
    Takes results of jobs scraper and converts locatons from strings to GeoLocation object
    :param result: list of dicts generated by scrapers containing open positions.
    :return: list of dicts, with GeoLocation object locations.
    """

    # TODO: Implement function
    pass

@celery.task
def enrichKeywords(self, result):
    """
    Background task to reverse the specified string.
    :param result: list of dicts generated by scrapers containing open positions.
    :return: boolean value, true if all required keys are present in each dict.
    """

    # TODO: Implement function
    pass
